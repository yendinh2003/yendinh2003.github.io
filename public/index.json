[
{
	"uri": "/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "/3-configlambda/3.1-configlambda/",
	"title": "Config Lambda",
	"tags": [],
	"description": "",
	"content": " Access Lambda and the function you just created\nOn the Lambda service interface: On the left side, youâ€™ll see the list of Lambda features. Select Function. You will see the list of functions youâ€™ve created above, including \u0026ldquo;fjc-upload-image\u0026rdquo;. Click on that function to see an overview of it.\nConfigure Lambda This is where you can enter code to program using Python or the language you configured earlier:\nHere, you will enter the code to enable the image analysis function.\nEnter the code in the following structure:\nconst AWS = require(\u0026#39;aws-sdk\u0026#39;); const s3 = new AWS.S3(); const BUCKET = \u0026#39;fjc-s3bucket\u0026#39;; // \u0026lt;-- change this to your bucket name exports.handler = async (event) =\u0026gt; { try { const body = JSON.parse(event.body); const imageData = body.image; // base64 image const buffer = Buffer.from(imageData, \u0026#39;base64\u0026#39;); const fileName = `upload-${Date.now()}.jpg`; await s3.putObject({ Bucket: BUCKET, Key: fileName, Body: buffer, ContentEncoding: \u0026#39;base64\u0026#39;, ContentType: \u0026#39;image/jpeg\u0026#39;, }).promise(); return { statusCode: 200, body: JSON.stringify({ message: \u0026#39;Upload successful\u0026#39;, key: fileName }), }; } catch (error) { return { statusCode: 500, body: JSON.stringify({ error: error.message }), }; } }; After entering the code in the Code Source section as above, you can save your changes by: Clicking the Deploy button or using the keyboard shortcut (Ctrl + Shift + U) Wait a few seconds for the system to save your changes and display a success message The result will look like the images below:\nYou have completed the configuration step for Lambda.\n"
},
{
	"uri": "/2-prerequiste/2.1-creates3bucket/",
	"title": "Create S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Initialize S3 Bucket for Storing Images and Results Access the Console and find the Amazon S3 service\nGo to the AWS Management Console Log in to your account After successful login, you will be redirected to the main AWS Management Console page as shown below: Search for S3 in the search bar and select the S3 service Click \u0026ldquo;Create bucket\u0026rdquo; and follow the instructions S3 Configuration\nIn the General configuration section:\nAWS Region: choose the region you want to use Bucket type: select General purpose Bucket name: enter fjc-s3bucket In the Object Ownership section:\nSelect ACLs disable (recommended) In the Block Public Access setting for this bucket section:\nUncheck Block all public access Check I acknowledge that the current settings might result in this bucket and the objects within becoming public. Keep the default settings for the remaining options, then select Create Bucket\nWait a few seconds and you will be redirected to the bucket list page with a success message as shown below: "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Amazon S3 (Simple Storage Service) is AWS\u0026rsquo;s object storage service that allows users to store and retrieve any type of data, such as images, videos, documents, or large data files. Data in S3 is stored in \u0026ldquo;buckets\u0026rdquo; and can be accessed via a URL or API. S3 offers virtually unlimited storage capacity, high durability, and strong integration with other services in the AWS ecosystem. It is an ideal choice for storing static files, data backups, or distributing content over the internet.\nAmazon API Gateway is a service that enables the creation, publishing, management, and securing of APIs at scale. It serves as the communication gateway between clients (e.g., browsers, mobile apps) and backend services such as AWS Lambda or EC2 servers. With API Gateway, you can easily build RESTful or HTTP APIs to receive and process user requests. This service supports version management, rate limiting, authentication, and logging, making the API deployment process fast, secure, and easy to control.\nAWS Lambda is AWSâ€™s serverless computing service that allows you to run code without having to manage physical or virtual servers. Lambda works on an event-driven modelâ€”meaning that when an event occurs (e.g., a file is uploaded to S3 or a request comes from API Gateway), Lambda automatically executes the code youâ€™ve written. You only need to focus on the processing logic, while AWS handles the deployment, scaling, and operations. Lambda supports multiple languages such as Python, Node.js, Java, and Go, making it well-suited for small applications, automation tasks, and flexible backend systems.\nBy using Amazon S3, you gain the following advantages: You can store millions or even billions of files without worrying about storage limitations. ~~ Data durability is guaranteed up to 99.999999999% (11 nines), ensuring safety for long-term storage.\nEach file has its own unique URL and can be accessed directly via the web or through an API.\nYou can control access to each file or bucket using policies, IAM, or ACLs.\nWorks seamlessly with services like Lambda, CloudFront, API Gateway, Athena, etc.\nAmazon S3 is a powerful, flexible, and reliable cloud storage solution suitable for both individuals and businesses of all sizes. With unlimited storage capacity, extremely high data durability, and deep integration with the AWS ecosystem, S3 is a top choice for storing images, videos, documents, backups, and static content for websites or applications. Thanks to its flexible access control and permissions model, Amazon S3 not only ensures safe storage but also supports the deployment of modern systems like serverless architectures with ease and efficiency.\n"
},
{
	"uri": "/4-apitolambda/4.1-updateiamrole/",
	"title": "Update IAM Role",
	"tags": [],
	"description": "",
	"content": "For our EC2 instances to be able to send session logs to the S3 bucket, we will need to update the IAM Role assigned to the EC2 instance by adding a policy that allows access to S3.\nUpdate IAM Role Go to IAM service management console Click Roles. In the search box, enter SSM. Click on the SSM-Role role. Click Attach policies. In the Search box enter S3. Click the policy AmazonS3FullAccess. Click Attach policy. In the production environment, we will grant stricter permissions to the specified S3 bucket. In the framework of this lab, we use the policy AmazonS3FullAccess for convenience.\nNext, we will proceed to create an S3 bucket to store session logs.\n"
},
{
	"uri": "/2-prerequiste/2.2-createlambdafunction/",
	"title": "Create Lambda Function",
	"tags": [],
	"description": "",
	"content": " In the search bar, type Lambda and then select the Lambda service. After accessing the service, click Create Lambda Function. On the Create function interface:\nFunction name: fjc-upload-image Runtime: select Node.js 18x Leave the remaining options as default settings. Then click Create Function. After successful creation, you will be redirected to the newly created function and a success message will be displayed. "
},
{
	"uri": "/3-configlambda/3.2-grandpermissions3/",
	"title": "Grand Permission S3",
	"tags": [],
	"description": "",
	"content": "Grant S3 Permissions to Lambda Function (in IAM Console) Method 1: Grant Full S3 Access (easy, quick) In the IAM interface, on the left sidebar, select Role\nYou will see a Role with the same name as the function you just created\nClick on that Role\nThe result should look like the image below:\nAfter accessing the Role interface:\nIn the Permissions policies section:\nSelect Add permission and then choose Attach Policies You will see the full list of Permissions Policies\nIn the Search bar, search for AmazonS3FullAccess Select that policy and click Add permission ðŸ“Œ Result: Your Lambda now has full access to all S3 buckets Method 2: Grant permission to upload images to only one bucket (safer) Go back to the Role for your function\nIn the Permissions policies section:\nSelect Add permission and then Create inline policy After entering the Create policy interface\nIn the Specify permission section, you can enter the following code to configure permissions, then click Next:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:PutObject\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::fjc-s3bucket/*\u0026#34; } ] } Next, on the Review and create interface: Policy name: LambdaS3UploadOnly Then click Create policy After creation, you will be returned to the Role screen and a success notification will appear ðŸ“Œ After completion, your Lambda can now successfully upload images to the S3 bucket.\n"
},
{
	"uri": "/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "To learn how to create an S3 Bucket, Lambda, and API Gateway, you can refer to the following lab guides:\nIntroduction to Amazon S3 Working with AWS Lambda Working with API Gateway To use an S3 Bucket for general data management and specifically for images, in this section we will learn how to upload images to S3 using AWS Lambda and API Gateway.\nContents Create S3 Bucket Create Lambda Function Create REST API in API Gateway "
},
{
	"uri": "/3-configlambda/",
	"title": "Config Lambda And S3",
	"tags": [],
	"description": "",
	"content": "In this step, we will configure Lambda and grant S3 permissions to Lambda.\nTo ensure Lambda functions smoothly and flexibly:\nContents 3.1. Configure Lambda\n3.2. Grant S3 Permissions to Lambda\n"
},
{
	"uri": "/2-prerequiste/2.3-createrestapi/",
	"title": "Create REST API",
	"tags": [],
	"description": "",
	"content": "Configure API Gateway for Image Analysis Function Search for and access the API Gateway service\nIn the search bar, type API Gateway and access the service. After accessing the service, perform the action Create an API. Configure API Gateway\nOn the API type page, you will see various types of APIs for different purposes such as: HTTP API, REST API, WebSocket API, etc. In this section, we will use REST API. In the \u0026ldquo;choose a API type\u0026rdquo; section:\nSelect REST API Click the Build button The result will look like this: When you reach the Create REST API interface: - API details: select New API - API name: ImageUploadAPI - API endpoint type: Regional - Then click the Create API button\nAfter that, you will be redirected to the newly created API and a success message will be displayed.\r![API](/images/13.png) "
},
{
	"uri": "/4-apitolambda/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "/5-testapi/",
	"title": "Test API on PostMan",
	"tags": [],
	"description": "",
	"content": "TEST UPLOADING BASE64 IMAGE API ON POSTMAN In this project, we use Base64. The purpose of Base64 in uploading images to S3 via Lambda and API Gateway is to transmit image data over the network (HTTP) safely and easily in text-only environments such as JSON or Lambda.\nWhat is Base64? Base64 is a way to encode binary data into text (character strings), making it possible to send files (images, audio, etc.) through systems that only support text, such as:\nJSON HTML HTTP request body Advantages of using Base64\nEasy to embed in JSON (\u0026ldquo;body\u0026rdquo;: \u0026ldquo;{ imageBase64: \u0026lsquo;\u0026hellip;\u0026rsquo;}\u0026rdquo;) No need for complex configuration like multipart/form-data Easy to test in the Lambda console In this project, Base64 helps encode images into text strings to send through API Gateway easily, and Lambda can decode them to upload to S3. This is a simple and effective solution for transmitting images in environments that do not support direct file uploads, such as Lambda Console or API Gateway.\nTest API on PostMan As above, we have the URL: https://co9tjkrvjc.execute-api.us-east-1.amazonaws.com/prod/uploads Next, let\u0026rsquo;s proceed on PostMan Method : POST URL : The API you just created Header : \u0026quot;\u0026quot; Content-Type: application/json \u0026quot;\u0026quot; Body : {\u0026#34;image\u0026#34;: \u0026#34;/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBxISEh...\u0026#34;} The image link is converted to base64 Then click Send and the result will be displayed below: Check the result on S3 After Postman notifies that the upload was successful, go to S3 to check if the image has been uploaded As shown in the image, it was successful If you want to view the image in detail, select the image you want to view, when the interface opens, select Open You will then be redirected to a new page and the image will be displayed So you have successfully uploaded an image to S3\n"
},
{
	"uri": "/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will follow these steps to delete the resources we created in this tutorial.\nDelete S3 bucket Go to the S3 management console. You will see the S3 Bucket interface and the name of the bucket you just created. 2. Go to the S3 service management console\nClick on the S3 bucket you created for this tutorial. (For example: fjc-s3bucket) Click Empty. Enter permanently delete, then click Empty to delete the objects in the bucket. Click Exit. After deleting all objects in the bucket, click Delete. Enter the name of the S3 bucket, then click Delete bucket to delete the S3 bucket. Delete Lambda Function Go to the Lambda service management console\nClick Function. Select the function you created above, for example: fjc-upload-image Click Action. Select Delete Then enter confirm Delete Rest API Go to the API Gateway management console\nClick on Api in the sidebar Then click on the APIs you created above Click Delete and enter \u0026ldquo;confirm\u0026rdquo; So we have completed cleaning up the resources.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]